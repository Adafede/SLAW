###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,dfl$rt_max,FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
rt <- rt+1
}
},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
rt <- rt+1
}
},rts=rts)
rt
rts[x]
x
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
rt <- rt+1
}
},rts=rts)
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
rt <- rt+1
}
},MoreArgs = list(rts=rts))
head(map_max)
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_max
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_min <- sapply(dfl$rt_min,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_min <- mapply(map_min,as.list(dfl$rt_min),FUN=function(x,rt,rts){
if(rt<rts[x]&x>1){
x <- x-1
}
x
},MoreArgs = list(rts=rts))
convertXMLopenMS <-  function(fv, outfile) {
suppressMessages(library(XML))
suppressMessages(library(stringr))
rtree <- xmlParse(fv)
rootnode <- xmlRoot(rtree)
rootsize <- xmlSize(rootnode)
num_features <- xmlSize(rootnode[[3]])
convertValue <- function(x) {
istable <- FALSE
val <- str_remove_all(x, "[\\[|\\]]")
if (nchar(val) != nchar(x)) {
istable <- TRUE
}
if (istable) {
val <- str_split(val, pattern = fixed(","), simplify = TRUE)
}
res <- suppressWarnings(as.numeric(val))
if (any(is.na(res)))
res <- val
return(res)
}
rts <- sapply(1:num_features,function(ix,rn){
x <- rn[[ix]]
convertValue(xmlGetAttr(x[[12]], "value"))
},rn=rootnode[[3]])
rts <- sort(unique(unlist(rts)))
margin <- 0.002
dfl <- sapply(1:num_features, function(ix, rn,margin=0.002) {
x <- rn[[ix]]
intensity <- x[[3]]
allint <- convertValue(xmlGetAttr(x[[11]], "value"))
allrt <- convertValue(xmlGetAttr(x[[12]], "value"))
allmz <- convertValue(xmlGetAttr(x[[13]], "value"))
num_signals <- length(allint)
fwhm <- convertValue(xmlGetAttr(x[[9]], "value"))
rt_min <- allrt-fwhm*0.75
rt_max <- allrt+fwhm*0.75
mz_min <- allmz-margin
mz_max <- allmz+margin
quality <- as.numeric(xmlValue(x[[6]]))
fwhm <- rep(fwhm,length(allrt))
quality <- rep(quality,length(allrt))
tempdf <- data.frame(mz = allmz,time = allrt,height=allint,
intensity = allint,rt_min=rt_min,rt_max=rt_max,
mz_min=mz_min,mz_max=mz_max,peakwidth=fwhm,
quality=quality)
return(tempdf)
}, rn = rootnode[[3]], margin=margin, simplify = FALSE)
# mz	rt	height	intensity	rt_min	rt_max	mz_min	mz_max	SN	peakwidth	right_on_left_assymetry
dfl <- do.call(rbind, dfl)
dfl <-  dfl[order(dfl$mz, decreasing = FALSE), ]
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_min <- sapply(dfl$rt_min,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_min <- mapply(map_min,as.list(dfl$rt_min),FUN=function(x,rt,rts){
if(rt<rts[x]&x>1){
x <- x-1
}
x
},MoreArgs = list(rts=rts))
dfl$rt_min <- rts[map_min]/60
dfl$rt_max <- rts[map_max]/60
####We dont remove the ifle as we need ti trestart the calculations eventually.
rr <- write.csv(dfl, outfile, row.names = FALSE)
}
tt <- convertXMLopenMS(feature_ml,outfiles)
convertXMLopenMS <-  function(fv, outfile) {
suppressMessages(library(XML))
suppressMessages(library(stringr))
rtree <- xmlParse(fv)
rootnode <- xmlRoot(rtree)
rootsize <- xmlSize(rootnode)
num_features <- xmlSize(rootnode[[3]])
convertValue <- function(x) {
istable <- FALSE
val <- str_remove_all(x, "[\\[|\\]]")
if (nchar(val) != nchar(x)) {
istable <- TRUE
}
if (istable) {
val <- str_split(val, pattern = fixed(","), simplify = TRUE)
}
res <- suppressWarnings(as.numeric(val))
if (any(is.na(res)))
res <- val
return(res)
}
rts <- sapply(1:num_features,function(ix,rn){
x <- rn[[ix]]
convertValue(xmlGetAttr(x[[12]], "value"))
},rn=rootnode[[3]])
rts <- sort(unique(unlist(rts)))
margin <- 0.002
dfl <- sapply(1:num_features, function(ix, rn,margin=0.002) {
x <- rn[[ix]]
intensity <- x[[3]]
allint <- convertValue(xmlGetAttr(x[[11]], "value"))
allrt <- convertValue(xmlGetAttr(x[[12]], "value"))
allmz <- convertValue(xmlGetAttr(x[[13]], "value"))
num_signals <- length(allint)
fwhm <- convertValue(xmlGetAttr(x[[9]], "value"))
rt_min <- allrt-fwhm*0.75
rt_max <- allrt+fwhm*0.75
mz_min <- allmz-margin
mz_max <- allmz+margin
quality <- as.numeric(xmlValue(x[[6]]))
fwhm <- rep(fwhm,length(allrt))
quality <- rep(quality,length(allrt))
tempdf <- data.frame(mz = allmz,time = allrt,height=allint,
intensity = allint,rt_min=rt_min,rt_max=rt_max,
mz_min=mz_min,mz_max=mz_max,peakwidth=fwhm,
quality=quality)
return(tempdf)
}, rn = rootnode[[3]], margin=margin, simplify = FALSE)
# mz	rt	height	intensity	rt_min	rt_max	mz_min	mz_max	SN	peakwidth	right_on_left_assymetry
dfl <- do.call(rbind, dfl)
dfl <-  dfl[order(dfl$mz, decreasing = FALSE), ]
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_min <- sapply(dfl$rt_min,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_min <- mapply(map_min,as.list(dfl$rt_min),FUN=function(x,rt,rts){
if(rt<rts[x]&x>1){
x <- x-1
}
x
},MoreArgs = list(rts=rts))
dfl$rt_min <- rts[map_min]/60
dfl$rt_max <- rts[map_max]/60
####We dont remove the ifle as we need ti trestart the calculations eventually.
return(dfl)
}
tt <- convertXMLopenMS(feature_ml,outfiles)
tail(tt)
convertXMLopenMS <-  function(fv, outfile) {
suppressMessages(library(XML))
suppressMessages(library(stringr))
rtree <- xmlParse(fv)
rootnode <- xmlRoot(rtree)
rootsize <- xmlSize(rootnode)
num_features <- xmlSize(rootnode[[3]])
convertValue <- function(x) {
istable <- FALSE
val <- str_remove_all(x, "[\\[|\\]]")
if (nchar(val) != nchar(x)) {
istable <- TRUE
}
if (istable) {
val <- str_split(val, pattern = fixed(","), simplify = TRUE)
}
res <- suppressWarnings(as.numeric(val))
if (any(is.na(res)))
res <- val
return(res)
}
rts <- sapply(1:num_features,function(ix,rn){
x <- rn[[ix]]
convertValue(xmlGetAttr(x[[12]], "value"))
},rn=rootnode[[3]])
rts <- sort(unique(unlist(rts)))
margin <- 0.002
dfl <- sapply(1:num_features, function(ix, rn,margin=0.002) {
x <- rn[[ix]]
intensity <- x[[3]]
allint <- convertValue(xmlGetAttr(x[[11]], "value"))
allrt <- convertValue(xmlGetAttr(x[[12]], "value"))
allmz <- convertValue(xmlGetAttr(x[[13]], "value"))
num_signals <- length(allint)
fwhm <- convertValue(xmlGetAttr(x[[9]], "value"))
rt_min <- allrt-fwhm*0.75
rt_max <- allrt+fwhm*0.75
mz_min <- allmz-margin
mz_max <- allmz+margin
quality <- as.numeric(xmlValue(x[[6]]))
fwhm <- rep(fwhm,length(allrt))
quality <- rep(quality,length(allrt))
tempdf <- data.frame(mz = allmz,rt = allrt,height=allint,
intensity = allint,rt_min=rt_min,rt_max=rt_max,
mz_min=mz_min,mz_max=mz_max,peakwidth=fwhm,
quality=quality)
return(tempdf)
}, rn = rootnode[[3]], margin=margin, simplify = FALSE)
# mz	rt	height	intensity	rt_min	rt_max	mz_min	mz_max	SN	peakwidth	right_on_left_assymetry
dfl <- do.call(rbind, dfl)
dfl <-  dfl[order(dfl$mz, decreasing = FALSE), ]
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_min <- sapply(dfl$rt_min,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_min <- mapply(map_min,as.list(dfl$rt_min),FUN=function(x,rt,rts){
if(rt<rts[x]&x>1){
x <- x-1
}
x
},MoreArgs = list(rts=rts))
dfl$rt_min <- rts[map_min]/60
dfl$rt_max <- rts[map_max]/60
dfl$rt <- dfl$rt/60
####We dont remove the ifle as we need ti trestart the calculations eventually.
return(dfl)
}
tt <- convertXMLopenMS(feature_ml,outfiles)
tail(tt)
head(rt)
head(tt)
convertXMLopenMS <-  function(fv) {
suppressMessages(library(XML))
suppressMessages(library(stringr))
rtree <- xmlParse(fv)
rootnode <- xmlRoot(rtree)
rootsize <- xmlSize(rootnode)
num_features <- xmlSize(rootnode[[3]])
convertValue <- function(x) {
istable <- FALSE
val <- str_remove_all(x, "[\\[|\\]]")
if (nchar(val) != nchar(x)) {
istable <- TRUE
}
if (istable) {
val <- str_split(val, pattern = fixed(","), simplify = TRUE)
}
res <- suppressWarnings(as.numeric(val))
if (any(is.na(res)))
res <- val
return(res)
}
rts <- sapply(1:num_features,function(ix,rn){
x <- rn[[ix]]
convertValue(xmlGetAttr(x[[12]], "value"))
},rn=rootnode[[3]])
rts <- sort(unique(unlist(rts)))
margin <- 0.002
dfl <- sapply(1:num_features, function(ix, rn,margin=0.002) {
x <- rn[[ix]]
intensity <- x[[3]]
allint <- convertValue(xmlGetAttr(x[[11]], "value"))
allrt <- convertValue(xmlGetAttr(x[[12]], "value"))
allmz <- convertValue(xmlGetAttr(x[[13]], "value"))
num_signals <- length(allint)
fwhm <- convertValue(xmlGetAttr(x[[9]], "value"))
rt_min <- allrt-fwhm*0.75
rt_max <- allrt+fwhm*0.75
mz_min <- allmz-margin
mz_max <- allmz+margin
quality <- as.numeric(xmlValue(x[[6]]))
fwhm <- rep(fwhm,length(allrt))
quality <- rep(quality,length(allrt))
tempdf <- data.frame(mz = allmz,rt = allrt,height=allint,
intensity = allint,rt_min=rt_min,rt_max=rt_max,
mz_min=mz_min,mz_max=mz_max,peakwidth=fwhm,
quality=quality)
return(tempdf)
}, rn = rootnode[[3]], margin=margin, simplify = FALSE)
# mz	rt	height	intensity	rt_min	rt_max	mz_min	mz_max	SN	peakwidth	right_on_left_assymetry
dfl <- do.call(rbind, dfl)
dfl <-  dfl[order(dfl$mz, decreasing = FALSE), ]
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_min <- sapply(dfl$rt_min,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_min <- mapply(map_min,as.list(dfl$rt_min),FUN=function(x,rt,rts){
if(rt<rts[x]&x>1){
x <- x-1
}
x
},MoreArgs = list(rts=rts))
dfl$rt_min <- rts[map_min]/60
dfl$rt_max <- rts[map_max]/60
dfl$rt <- dfl$rt/60
####We dont remove the ifle as we need ti trestart the calculations eventually.
return(dfl)
}
converted_table <- convertXMLopenMS(feature_ml)
feature_ml <- args[1]
outdir <-  args[2]
args <- c("U:/users/Alexis/examples_lcms_workflow/tt4.featureML","U:/users/Alexis/examples_lcms_workflow/tt4.csv")
feature_ml <- args[1]
outfile <-  args[2]
convertXMLopenMS <-  function(fv) {
suppressMessages(library(XML))
suppressMessages(library(stringr))
rtree <- xmlParse(fv)
rootnode <- xmlRoot(rtree)
rootsize <- xmlSize(rootnode)
num_features <- xmlSize(rootnode[[3]])
convertValue <- function(x) {
istable <- FALSE
val <- str_remove_all(x, "[\\[|\\]]")
if (nchar(val) != nchar(x)) {
istable <- TRUE
}
if (istable) {
val <- str_split(val, pattern = fixed(","), simplify = TRUE)
}
res <- suppressWarnings(as.numeric(val))
if (any(is.na(res)))
res <- val
return(res)
}
rts <- sapply(1:num_features,function(ix,rn){
x <- rn[[ix]]
convertValue(xmlGetAttr(x[[12]], "value"))
},rn=rootnode[[3]])
rts <- sort(unique(unlist(rts)))
margin <- 0.002
dfl <- sapply(1:num_features, function(ix, rn,margin=0.002) {
x <- rn[[ix]]
intensity <- x[[3]]
allint <- convertValue(xmlGetAttr(x[[11]], "value"))
allrt <- convertValue(xmlGetAttr(x[[12]], "value"))
allmz <- convertValue(xmlGetAttr(x[[13]], "value"))
num_signals <- length(allint)
fwhm <- convertValue(xmlGetAttr(x[[9]], "value"))
rt_min <- allrt-fwhm*0.75
rt_max <- allrt+fwhm*0.75
mz_min <- allmz-margin
mz_max <- allmz+margin
quality <- as.numeric(xmlValue(x[[6]]))
fwhm <- rep(fwhm,length(allrt))
quality <- rep(quality,length(allrt))
tempdf <- data.frame(mz = allmz,rt = allrt,height=allint,
intensity = allint,rt_min=rt_min,rt_max=rt_max,
mz_min=mz_min,mz_max=mz_max,peakwidth=fwhm,
quality=quality)
return(tempdf)
}, rn = rootnode[[3]], margin=margin, simplify = FALSE)
# mz	rt	height	intensity	rt_min	rt_max	mz_min	mz_max	SN	peakwidth	right_on_left_assymetry
dfl <- do.call(rbind, dfl)
dfl <-  dfl[order(dfl$mz, decreasing = FALSE), ]
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_min <- sapply(dfl$rt_min,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_min <- mapply(map_min,as.list(dfl$rt_min),FUN=function(x,rt,rts){
if(rt<rts[x]&x>1){
x <- x-1
}
x
},MoreArgs = list(rts=rts))
dfl$rt_min <- rts[map_min]/60
dfl$rt_max <- rts[map_max]/60
dfl$rt <- dfl$rt/60
####We dont remove the ifle as we need ti trestart the calculations eventually.
return(dfl)
}
converted_table <- convertXMLopenMS(feature_ml)
write.csv(converted_table, outfile, row.names = FALSE)
write.csv(converted_table, outfile, row.names = FALSE)
write.csv(converted_table, outfile, row.names = FALSE,header=TRUE)
write.csv2(converted_table, outfile, row.names = FALSE,header=TRUE)
write.csv2(converted_table, outfile, row.names = FALSE)
write.csv2(converted_table, outfile, row.names = FALSE,sep=",")
write.table(converted_table, outfile, row.names = FALSE,sep=",",header=TRUE)
write.table(converted_table, outfile, row.names = FALSE,sep=",")
write.table(converted_table, outfile, row.names = FALSE,sep=",",col.names = TRUE)
xx <- xmlParent("U:/users/Alexis/examples_lcms_workflow/output_optim/OPENMS/peaktables/peaktable_2_829b1364471353d2e541fb15fb80d92d.featureXML")
xx <- xmlParse("U:/users/Alexis/examples_lcms_workflow/output_optim/OPENMS/peaktables/peaktable_2_829b1364471353d2e541fb15fb80d92d.featureXML")
fv <- "sauer1/users/Alexis/examples_lcms_workflow/output_optim/OPENMS/peaktables/peaktable_3_6d9a7d5b0177f5be901c9e5e1055d603.featureXML"
rtree <- xmlParse(fv)
rtree <- xmlParse(fv)
fv
xmlParse(fv)
rtree <- xmlParse(fv,asText = FALSE)
fv <- "U:/users/Alexis/examples_lcms_workflow/output_optim/OPENMS/peaktables/peaktable_3_6d9a7d5b0177f5be901c9e5e1055d603.featureXML"
rtree <- xmlParse(fv,asText = FALSE)
rtree <- xmlParse(fv)
rootnode <- xmlRoot(rtree)
rootsize <- xmlSize(rootnode)
num_features <- xmlSize(rootnode[[3]])
convertValue <- function(x) {
istable <- FALSE
val <- str_remove_all(x, "[\\[|\\]]")
if (nchar(val) != nchar(x)) {
istable <- TRUE
}
if (istable) {
val <- str_split(val, pattern = fixed(","), simplify = TRUE)
}
res <- suppressWarnings(as.numeric(val))
if (any(is.na(res)))
res <- val
return(res)
}
rts <- sapply(1:num_features,function(ix,rn){
x <- rn[[ix]]
convertValue(xmlGetAttr(x[[12]], "value"))
},rn=rootnode[[3]])
rts <- sort(unique(unlist(rts)))
margin <- 0.002
dfl <- sapply(1:num_features, function(ix, rn,margin=0.002) {
x <- rn[[ix]]
intensity <- x[[3]]
allint <- convertValue(xmlGetAttr(x[[11]], "value"))
allrt <- convertValue(xmlGetAttr(x[[12]], "value"))
allmz <- convertValue(xmlGetAttr(x[[13]], "value"))
num_signals <- length(allint)
fwhm <- convertValue(xmlGetAttr(x[[9]], "value"))
rt_min <- allrt-fwhm*0.75
rt_max <- allrt+fwhm*0.75
mz_min <- allmz-margin
mz_max <- allmz+margin
quality <- as.numeric(xmlValue(x[[6]]))
fwhm <- rep(fwhm,length(allrt))
quality <- rep(quality,length(allrt))
tempdf <- data.frame(mz = allmz,rt = allrt,height=allint,
intensity = allint,rt_min=rt_min,rt_max=rt_max,
mz_min=mz_min,mz_max=mz_max,peakwidth=fwhm,
quality=quality)
return(tempdf)
}, rn = rootnode[[3]], margin=margin, simplify = FALSE)
dfl <- do.call(rbind, dfl)
dfl <-  dfl[order(dfl$mz, decreasing = FALSE), ]
###We map the retention time to the TRUE retention time.
map_max <- sapply(dfl$rt_max,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_max <- mapply(map_max,as.list(dfl$rt_max),FUN=function(x,rt,rts){
if(rt>rts[x]&x<length(rt)){
x <- x+1
}
x
},MoreArgs = list(rts=rts))
map_min <- sapply(dfl$rt_min,function(x,rts){which.min(abs(x-rts))},rts=rts)
map_min <- mapply(map_min,as.list(dfl$rt_min),FUN=function(x,rt,rts){
if(rt<rts[x]&x>1){
x <- x-1
}
x
},MoreArgs = list(rts=rts))
dfl$rt_min <- rts[map_min]/60
dfl$rt_max <- rts[map_max]/60
dfl$rt <- dfl$rt/60
