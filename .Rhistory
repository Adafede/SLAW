# transferMetbolightsToCluster("MTBLS65","E:/temp_transfer/","/cluster/scratch/dalexis/MTBLS65/mzML",restart=39)
transferMetbolightsToCluster("MTBLS63","E:/temp_transfer/","/cluster/scratch/dalexis/MTBLS65_MTBLS63/mzML",restart=82)
vss
vss[vidx[1]]
vidx
seq_along(zip_names)
176/20
2500/8.8
284.1/60
for(i in 1:14){
cat(paste('bsub -n 1 -N -R singularity -R "rusage[mem=10000]" -o ~/logs/log_finger_desc_',i,
'.txt -e ~/logs/err_finger_desc_',i,
'.txt -W 24:00 "singularity run -C -W /cluster/scratch/dalexis -B /cluster/scratch/dalexis/massbank_mgf/fingerprints/sirius:/output -B /cluster/scratch/dalexis/massbank_mgf/split:/input fingerprints.simg sirius /input/massbank_',i,
'.mgf /output/res_sirius_',i,'.tsv"',sep=""))
}
for(i in 1:14){
cat(paste('bsub -n 1 -N -R singularity -R "rusage[mem=10000]" -o ~/logs/log_finger_desc_',i,
'.txt -e ~/logs/err_finger_desc_',i,
'.txt -W 24:00 "singularity run -C -W /cluster/scratch/dalexis -B /cluster/scratch/dalexis/massbank_mgf/fingerprints/sirius:/output -B /cluster/scratch/dalexis/massbank_mgf/split:/input fingerprints.simg sirius /input/massbank_',i,
'.mgf /output/res_sirius_',i,'.tsv\n"',sep=""))
}
for(i in 1:14){
cat(paste('bsub -n 1 -N -R singularity -R "rusage[mem=10000]" -o ~/logs/log_finger_desc_',i,
'.txt -e ~/logs/err_finger_desc_',i,
'.txt -W 24:00 "singularity run -C -W /cluster/scratch/dalexis -B /cluster/scratch/dalexis/massbank_mgf/fingerprints/sirius:/output -B /cluster/scratch/dalexis/massbank_mgf/split:/input fingerprints.simg sirius /input/massbank_',i,
'.mgf /output/res_sirius_',i,'.tsv\n"',sep=""),file = "E:/cline_sirius.txt")
}
for(i in 1:14){
cat(paste('bsub -n 1 -N -R singularity -R "rusage[mem=10000]" -o ~/logs/log_finger_desc_',i,
'.txt -e ~/logs/err_finger_desc_',i,
'.txt -W 24:00 "singularity run -C -W /cluster/scratch/dalexis -B /cluster/scratch/dalexis/massbank_mgf/fingerprints/sirius:/output -B /cluster/scratch/dalexis/massbank_mgf/split:/input fingerprints.simg sirius /input/massbank_',i,
'.mgf /output/res_sirius_',i,'.tsv"\n',sep=""))
}
for(i in 1:14){
cat(paste('bsub -n 1 -N -R singularity -R "rusage[mem=10000]" -o ~/logs/log_desc_desc_',i,
'.txt -e ~/logs/err_desc_desc_',i,
'.txt -W 24:00 "singularity run -C -W /cluster/scratch/dalexis -B /cluster/scratch/dalexis/massbank_mgf/fingerprints/features:/output -B /cluster/scratch/dalexis/massbank_mgf/split:/input fingerprints.simg descriptor_msms /input/massbank_',i,
'.mgf /output/res_desc_',i,'.tsv"\n',sep=""))
}
for(i in c*2:3,5:11,13,14){
cat(paste('bsub -n 1 -N -R singularity -R "rusage[mem=10000]" -o ~/logs/log_desc_desc_',i,
'.txt -e ~/logs/err_desc_desc_',i,
'.txt -W 24:00 "singularity run -C -W /cluster/scratch/dalexis -B /cluster/scratch/dalexis/massbank_mgf/fingerprints/features:/output -B /cluster/scratch/dalexis/massbank_mgf/split:/input fingerprints.simg descriptor_msms /input/massbank_',i,
'.mgf /output/res_desc_',i,'.tsv"\n',sep=""))
}
for(i in c(2:3,5:11,13,14)){
cat(paste('bsub -n 1 -N -R singularity -R "rusage[mem=10000]" -o ~/logs/log_desc_desc_',i,
'.txt -e ~/logs/err_desc_desc_',i,
'.txt -W 24:00 "singularity run -C -W /cluster/scratch/dalexis -B /cluster/scratch/dalexis/massbank_mgf/fingerprints/features:/output -B /cluster/scratch/dalexis/massbank_mgf/split:/input fingerprints.simg descriptor_msms /input/massbank_',i,
'.mgf /output/res_desc_',i,'.tsv"\n',sep=""))
}
##Script which take as input a mzML repository,
#A paramter file and do the processin using XCMS.
library(xcms)
library(yaml)
library(CAMERA)
##Script which take as input a mzML repository,
#A paramter file and do the processin using XCMS.
library(xcms)
library(yaml)
library(CAMERA)
library(DBI)
library(RSQLite)
##Script which take as input a mzML repository,
#A paramter file and do the processin using XCMS.
library(xcms)
library(CAMERA)
library(DBI)
library(yaml)
library(RSQLite)
args <- c("U:/users/Alexis/examples_lcms_workflow/processing_db.sqlite",
"U:/users/Alexis/examples_lcms_workflow/parameters.txt",
"E:/res_test_pos_xcms.csv",
"E:/res_test_pos_xcms.Rdata")
PATH_DB <- args[1]
PARAM_FILE <- args[2]
OUTPUT_DATAMATRIX <- args[3]
OUTPUT_XSET <- args[4]
NUM_CORES <- as.numeric(args[5])
get_os <- function() {
if (.Platform$OS.type == "windows") {
return("win")
} else if (Sys.info()["sysname"] == "Darwin") {
return("mac")
} else if (.Platform$OS.type == "unix") {
return("unix")
} else {
stop("Unknown OS")
}
}
####We get a list of all the raw files.
dbb <- dbConnect(RSQLite:::SQLite(), PATH_DB)
raw_files <- dbGetQuery(dbb, "SELECT path FROM samples")[, 1]
PATH_DB
args <- c("U:/users/Alexis/examples_lcms_workflow/output/processing_db.sqlite",
"U:/users/Alexis/examples_lcms_workflow/parameters.txt",
"E:/res_test_pos_xcms.csv",
"E:/res_test_pos_xcms.Rdata")
PATH_DB <- args[1]
PARAM_FILE <- args[2]
OUTPUT_DATAMATRIX <- args[3]
NUM_CORES <- as.numeric(args[5])
OUTPUT_XSET <- args[4]
get_os <- function() {
if (.Platform$OS.type == "windows") {
return("win")
} else if (Sys.info()["sysname"] == "Darwin") {
return("mac")
} else if (.Platform$OS.type == "unix") {
return("unix")
} else {
stop("Unknown OS")
}
}
####We get a list of all the raw files.
dbb <- dbConnect(RSQLite:::SQLite(), PATH_DB)
raw_files <- dbGetQuery(dbb, "SELECT path FROM samples")[, 1]
dbDisconnect(dbb)
raw_files
bpp <- NULL
if (get_os() == "win") {
bpp <- SnowParam(workers = NUM_CORES)
} else{
bpp <- MulticoreParam(workers = min(NUM_CORES, 4))
}
args <- c("U:/users/Alexis/examples_lcms_workflow/output/processing_db.sqlite",
"U:/users/Alexis/examples_lcms_workflow/parameters.txt",
"E:/res_test_pos_xcms.csv",
"E:/res_test_pos_xcms.Rdata","2")
PATH_DB <- args[1]
PARAM_FILE <- args[2]
OUTPUT_DATAMATRIX <- args[3]
OUTPUT_XSET <- args[4]
NUM_CORES <- as.numeric(args[5])
get_os <- function() {
if (.Platform$OS.type == "windows") {
return("win")
} else if (Sys.info()["sysname"] == "Darwin") {
return("mac")
} else if (.Platform$OS.type == "unix") {
return("unix")
} else {
stop("Unknown OS")
}
}
####We get a list of all the raw files.
dbb <- dbConnect(RSQLite:::SQLite(), PATH_DB)
raw_files <- dbGetQuery(dbb, "SELECT path FROM samples")[, 1]
dbDisconnect(dbb)
bpp <- NULL
if (get_os() == "win") {
bpp <- SnowParam(workers = NUM_CORES)
} else{
bpp <- MulticoreParam(workers = min(NUM_CORES, 4))
}
vpar <- read_yaml(PARAM_FILE)
pd <- data.frame(sample_name = sub(basename(raw_files), pattern = ".mzML",
replacement = "", fixed = TRUE),
sample_group = rep("simple", length(raw_files)),
stringsAsFactors = FALSE)
args <- c("U:/users/Alexis/examples_lcms_workflow/output/processing_db.sqlite",
"U:/users/Alexis/examples_lcms_workflow/input/parameters.txt",
"E:/res_test_pos_xcms.csv",
"E:/res_test_pos_xcms.Rdata","2")
PATH_DB <- args[1]
PARAM_FILE <- args[2]
OUTPUT_DATAMATRIX <- args[3]
OUTPUT_XSET <- args[4]
NUM_CORES <- as.numeric(args[5])
get_os <- function() {
if (.Platform$OS.type == "windows") {
return("win")
} else if (Sys.info()["sysname"] == "Darwin") {
return("mac")
} else if (.Platform$OS.type == "unix") {
return("unix")
} else {
stop("Unknown OS")
}
}
####We get a list of all the raw files.
dbb <- dbConnect(RSQLite:::SQLite(), PATH_DB)
raw_files <- dbGetQuery(dbb, "SELECT path FROM samples")[, 1]
dbDisconnect(dbb)
bpp <- NULL
if (get_os() == "win") {
bpp <- SnowParam(workers = NUM_CORES)
} else{
bpp <- MulticoreParam(workers = min(NUM_CORES, 4))
}
vpar <- read_yaml(PARAM_FILE)
pd <- data.frame(sample_name = sub(basename(raw_files), pattern = ".mzML",
replacement = "", fixed = TRUE),
sample_group = rep("simple", length(raw_files)),
stringsAsFactors = FALSE)
raw_data <- readMSData(files = raw_files, pdata = new("NAnnotatedDataFrame", pd),mode = "onDisk")
raw_files
library(stringr)
###To test it we change the
if(FALSE){
library(stringr)
str_replace(raw_files,"*sauer1/","U:/")
}
str_replace(raw_files,"*sauer1/","U:/")
str_replace(raw_files,fixed("/sauer1/"),fixed("U:/"))
raw_files <- str_replace(raw_files,fixed("/sauer1/"),fixed("U:/"))
bpp <- NULL
if (get_os() == "win") {
bpp <- SnowParam(workers = NUM_CORES)
} else{
bpp <- MulticoreParam(workers = min(NUM_CORES, 4))
}
vpar <- read_yaml(PARAM_FILE)
args <- c("U:/users/Alexis/examples_lcms_workflow/output/processing_db.sqlite",
"U:/users/Alexis/examples_lcms_workflow/output/parameters.txt",
"E:/res_test_pos_xcms.csv",
"E:/res_test_pos_xcms.Rdata","2")
# args <- c("/cluster/scratch/dalexis/mml_2_neg/mzML",
#           "/cluster/scratch/dalexis/mml_2_neg/parameters.txt",
#           "/cluster/scratch/dalexis/mml_2_neg/res_mml2_xcms.csv",
#           "/cluster/scratch/dalexis/mml_2_neg/res_mml2_neg_xcms.RData",
#           "20")
###cluster version
PATH_DB <- args[1]
PARAM_FILE <- args[2]
OUTPUT_DATAMATRIX <- args[3]
OUTPUT_XSET <- args[4]
NUM_CORES <- as.numeric(args[5])
get_os <- function() {
if (.Platform$OS.type == "windows") {
return("win")
} else if (Sys.info()["sysname"] == "Darwin") {
return("mac")
} else if (.Platform$OS.type == "unix") {
return("unix")
} else {
stop("Unknown OS")
}
}
####We get a list of all the raw files.
dbb <- dbConnect(RSQLite:::SQLite(), PATH_DB)
raw_files <- dbGetQuery(dbb, "SELECT path FROM samples")[, 1]
dbDisconnect(dbb)
raw_files <- str_replace(raw_files,fixed("/sauer1/"),fixed("U:/"))
bpp <- NULL
if (get_os() == "win") {
bpp <- SnowParam(workers = NUM_CORES)
} else{
bpp <- MulticoreParam(workers = min(NUM_CORES, 4))
}
vpar <- read_yaml(PARAM_FILE)
pd <- data.frame(sample_name = sub(basename(raw_files), pattern = ".mzML",
replacement = "", fixed = TRUE),
sample_group = rep("simple", length(raw_files)),
stringsAsFactors = FALSE)
raw_data <- readMSData(files = raw_files, pdata = new("NAnnotatedDataFrame", pd),mode = "onDisk")
cwp <- CentWaveParam(noise = as.numeric(vpar$peakpicking$noise_level_ms1$value),
snthresh=as.numeric(vpar$peakpicking$peaks_deconvolution$SN$value),
peakwidth = c(as.numeric(vpar$peakpicking$peaks_deconvolution$peak_width_min$value)*60,
as.numeric(vpar$peakpicking$peaks_deconvolution$peak_width_max$value)*60),
ppm=as.numeric(vpar$peakpicking$traces_construction$ppm$value))
xdata <- findChromPeaks(raw_data, param = cwp,BPPARAM = bpp)
xdata
xdata <- groupChromPeaks(xdata, param = pdp)
pdp <- PeakDensityParam(sampleGroups = xdata$sample_group,
minFraction = 2/length(xdata$sample_group),
bw=3*as.numeric(vpar$grouping$drt$value),
binSize = as.numeric(vpar$grouping$dmz$value))
xdata <- adjustRtime(xdata, param = ObiwarpParam(binSize = 0.6))
pdp <- PeakDensityParam(sampleGroups = xdata$sample_group,
minFraction = 2/length(xdata$sample_group),
bw=3*as.numeric(vpar$grouping$drt$value),
binSize = as.numeric(vpar$grouping$dmz$value))
xdata <- groupChromPeaks(xdata, param = pdp)
###Adding the CAMERA annotation
groupChromPeaks
showMethods("groupChromPeaks")
geMtethod("groupChromPeaks","XCMSnExp")
geMethod("groupChromPeaks","XCMSnExp")
getMethod("groupChromPeaks","XCMSnExp")
getMethod("groupChromPeaks",list(object="XCMSnExp", param="PeakDensityParam"))
xcms:::do_groupChromPeaks_density
library(CAMERA)
CAMERA
library(CAMERA)
vpar$ion_annotation$min_filter
vpar$ion_annotation$min_filter
vpar$ion_annotation$adducts_positive
CAMERA:::findAdducts
showMthods("CAMERA:::findAdducts")
showMethods("CAMERA:::findAdducts")
showMethods("findAdducts")
getMethod("findAdducts",list(object="xsAnnotate"))
###We check the polarity of this parameter eventually.
rules <- calcRules(maxcharge = 3, mol = 3,
nion = 2, nnloss = 1, nnadd = 1, nh = 2,
polarity = "positive", lib.loc = .libPaths(),
multFragments = 1)
###We check the polarity of this parameter eventually.
CAMERA:::calcRules(maxcharge = 3, mol = 3,
nion = 2, nnloss = 1, nnadd = 1, nh = 2,
polarity = "positive", lib.loc = .libPaths(),
multFragments = 1)
vpar$ion_annotation$adducts_positive
library(InterpretMSSpectrum)
InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$main_adducts_positive$value)
InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$adducts_positive$value)
CAMERA:::calcRules(maxcharge = 3, mol = 3,
nion = 2, nnloss = 1, nnadd = 1, nh = 2,
polarity = "positive", lib.loc = .libPaths(),
multFragments = 1)
xdata@experimentData
msInfo(xdata)
xdata@assayData
xdata@protocolData
xdata@phenoData
pData(xdata)
vpar$ion_annotation$adducts_positive$value
vpar$ion_annotation$adducts_negative$value
vpar$ion_annotation$main_adducts_positive$value
vpar$ion_annotation$adducts_positive$value
###We check the polarity of this parameter eventually.
CAMERA:::calcRules(maxcharge = 3, mol = 3,
nion = 2, nnloss = 1, nnadd = 1, nh = 2,
polarity = "positive", lib.loc = .libPaths(),
multFragments = 1)
InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$adducts_positive$value)
main_adduct <- InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$main_adducts_positive$value)
all_adducts <- InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$adducts_positive$value)
ifelse(all_adducts$name %in% main_adduct$name,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts)))
###We rebuild the rules sets ysed by XCMS
rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
mandatory=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
score=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))),
parent=rep(NA,nrow(all_adducts)))
is_main <- all_adducts$name %in% main_adduct$name
###We rebuild the rules sets ysed by XCMS
rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
mandatory=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
score=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))),
parent=rep(NA,nrow(all_adducts)))
###we give a score of 2 as CAMERA for the first principal ion
rules$score[which(is_main)[1]] <- 2
rules
vann <- annotate(xdata,nSlaves=NUM_CORES,ppm=vpar$ion_annotation$ppm,mzabs=vpar$ion_annotation$dmz,rules = rules)
vann <- annotate(xcmsSet(xdata),nSlaves=NUM_CORES,ppm=vpar$ion_annotation$ppm,mzabs=vpar$ion_annotation$dmz,rules = rules)
txdat <- as(xdata, "xcmsSet")
bpp <- SnowParam(workers = NUM_CORES)
bpp
NUM_CORES <- as.numeric(args[5])
NUM_CORES
args <- c("U:/users/Alexis/examples_lcms_workflow/output/processing_db.sqlite",
"U:/users/Alexis/examples_lcms_workflow/output/parameters.txt",
"E:/res_test_pos_xcms.csv",
"E:/res_test_pos_xcms.Rdata","4")
NUM_CORES <- as.numeric(args[5])
NUM_CORES <- as.numeric(args[5])
bpp <- SnowParam(workers = NUM_CORES)
bpp
raw_data <- readMSData(files = raw_files, pdata = new("NAnnotatedDataFrame", pd), mode = "onDisk", msLevel.=1)
xdata <- findChromPeaks(raw_data, param = cwp,BPPARAM = bpp)
cwp <- CentWaveParam(noise = as.numeric(vpar$peakpicking$noise_level_ms1$value),
snthresh=as.numeric(vpar$peakpicking$peaks_deconvolution$SN$value),
peakwidth = c(as.numeric(vpar$peakpicking$peaks_deconvolution$peak_width_min$value)*60,
as.numeric(vpar$peakpicking$peaks_deconvolution$peak_width_max$value)*60),
ppm=as.numeric(vpar$peakpicking$traces_construction$ppm$value))
xdata <- findChromPeaks(raw_data, param = cwp,BPPARAM = bpp)
xdata <- adjustRtime(xdata, param = ObiwarpParam(binSize = 0.6))
pdp <- PeakDensityParam(sampleGroups = xdata$sample_group,
minFraction = 2/length(xdata$sample_group),
bw=3*as.numeric(vpar$grouping$drt$value),
binSize = as.numeric(vpar$grouping$dmz$value))
xdata <- groupChromPeaks(xdata, param = pdp)
###We determine the polarity using the parameter files
polarity <- "positive"
if(vpar$ion_annotation$adducts_positive$value[1] == "NONE"){
polarity <- "negative"
}
polarity
main_adduct <- NULL
all_adducts <- NULL
if(polarity=="positive"){
main_adduct <- InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$main_adducts_positive$value)
all_adducts <- InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$adducts_positive$value)
}else{
main_adduct <- InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$adducts_negative$value)
all_adducts <- InterpretMSSpectrum:::getRuleFromIonSymbol(vpar$ion_annotation$main_adducts_negative$value)
}
main_adduct
all_adducts
is_main <- all_adducts$name %in% main_adduct$name
###We rebuild the rules sets ysed by XCMS
rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
mandatory=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
score=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))),
parent=rep(NA,nrow(all_adducts)))
rules
###we give a score of 2 as CAMERA for the first principal ion
rules$score[which(is_main)[1]] <- 2
txdata <- as(xdata, "xcmsSet")
vann <- annotate(xcmsSet(xdata),nSlaves=NUM_CORES,ppm=vpar$ion_annotation$ppm,mzabs=vpar$ion_annotation$dmz,rules = rules)
vann <- annotate(txdata,nSlaves=NUM_CORES,ppm=vpar$ion_annotation$ppm,mzabs=vpar$ion_annotation$dmz,rules = rules)
vpar$ion_annotation$ppm
vann <- annotate(txdata,nSlaves=NUM_CORES,ppm=vpar$ion_annotation$ppm$value,mzabs=vpar$ion_annotation$dmz$value,rules = rules)
rules
vann
txdata <- fillPeaks(txdata)
txdata <- as(xdata, "xcmsSet")
an <- xsAnnotate(txdata,
sample=seq(1,length(sampnames(mtbls2Set))),
nSlaves=nSlaves)
an <- xsAnnotate(txdata,
sample=seq(1,length(sampnames(txdata))),
nSlaves=NUM_CORES)
an <- groupFWHM(an)
an <- findIsotopes(an)  # optional but recommended.
an <- groupCorr(an,
graphMethod="lpc",
calcIso = TRUE,
calcCiS = TRUE,
calcCaS = TRUE,
cor_eic_th=0.6)
an <- findAdducts(an,
rules=rules,
polarity=polarity)
library(mtbls1)
library(mtbls1)
install.packages("mtbls2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mtbls2")
rs <- new("ruleSet")
rs@ionlistfile <- file.path(find.package("mtbls2"), "lists","ions.csv")
rs@neutraladditionfile <- file.path(find.package("mtbls2"), "lists","neutraladdition.csv")
rs@neutrallossfile <- file.path(find.package("mtbls2"), "lists","neutralloss.csv")
rs <- readLists(rs)
rs <- setDefaultParams(rs)
rs <- generateRules(rs)
an <- findAdducts(an,
rules=rs@rules,
polarity="positive")
rs@rules
tail(rs@rules)
###We rebuild the rules sets ysed by XCMS
# rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
#                     massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
#                     mandatory=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
#                     score=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))),
#                     parent=rep(NA,nrow(all_adducts)))
#
#
# name nmol charge   massdiff oidscore quasi  ips
rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
oidscore=1:nrow(adducts),
quasi=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
ips=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))))
###We rebuild the rules sets ysed by XCMS
# rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
#                     massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
#                     mandatory=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
#                     score=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))),
#                     parent=rep(NA,nrow(all_adducts)))
#
#
# name nmol charge   massdiff oidscore quasi  ips
rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
oidscore=1:nrow(all_adducts),
quasi=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
ips=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))))
an <- findAdducts(an,
rules=rules,
polarity=polarity)
rules
rules
###We rebuild the rules sets ysed by XCMS
# rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
#                     massdiff=all_adducts$massdiff,typ=rep("A",nrow(all_adducts)),
#                     mandatory=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
#                     score=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))),
#                     parent=rep(NA,nrow(all_adducts)))
#
#
# name nmol charge   massdiff oidscore quasi  ips
rules <- data.frame(name=all_adducts$name,nmol=all_adducts$nmol,charge=all_adducts$charge,
massdiff=all_adducts$massdiff,
oidscore=1:nrow(all_adducts),
quasi=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0,nrow(all_adducts))),
ips=ifelse(is_main,rep(1,nrow(all_adducts)),rep(0.25,nrow(all_adducts))))
an <- findAdducts(an,
rules=rules,
polarity=polarity)
annotated_pl <- getPeaklist(an)
head(annotated_pl)
tail(annotated_pl)
tbale(table(anotated_pl[,"pcgroup"]))
table(table(anotated_pl[,"pcgroup"]))
table(table(annotated_pl[,"pcgroup"]))
annotated_pl$pcgroup
ttab <-table(annotated_pl[,"pcgroup"])
which(ttab>700)
ttab["90"]
ttab
which(ttab>100)
dim(annotated_pl)
annotated_pl[,"pcgroup"]==91
which(annotated_pl[,"pcgroup"]==91)
annotated_pl[which(annotated_pl[,"pcgroup"]==91),]
