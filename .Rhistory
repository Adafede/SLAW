file.size("U:/users/Alexis/examples_lcms_workflow/input/BEH30_2min_LipidMix_4.mzML")
format(file.size("U:/users/Alexis/examples_lcms_workflow/input/BEH30_2min_LipidMix_4.mzML"),"Mb")
file.size("U:/users/Alexis/examples_lcms_workflow/input/BEH30_2min_LipidMix_4.mzML")
80*20
20*500
table_studies <- read.table("euler_test.csv",sep=";",header=TRUE,stringsAsFactors = FALSE)
OUTPUT_DIR <- "/cluster/scratch/dalexis/restest"
RES_DIR <- file.path(OUTPUT_DIR,"res")
LOG_DIR <- file.path(OUTPUT_DIR,"log")
for(i in 1:nrow(table_studies)){
sel_id <- table_studies[i,1]
sel_input <- table_studies[i,2]
sel_polarity <- table_studies[i,3]
sel_par <- table_studies[i,4]
output_dir <- file.path(RES_DIR,sel_id)
if(dir.exists(output_dir)) dir.create(output_dir,recursive = TRUE)
all_files <- list.files(sel_input,full.names = TRUE)
###We determine the memory required by each
fisze_mb <- max(file.size(all_files)/100000)
CORE_NUMS <- 5
##WE check the total number of files
if(length(all_files)>1000){
CORE_NUMS <- floor(length(all_files)/20)
}
##We consider that the
MEMORY_LIM <- min(7000,CORE_NUMS*400)
TIME_LIM <- paste(max(2,1+length(all_files)/100),"00",sep=":")
log_file <- file.path(LOG_DIR,paste("log",sel_id,".txt",sep=""))
war_file <- file.path(LOG_DIR,paste("war",sel_id,".txt",sep=""))
##If the parameters file exists, we copy it into the new parameters.txt file.
if(file.exists(sel_par)){
PATH_PARAM <- file.path(output_dir,"parameters.txt")
file.copy(sel_par,PATH_PARAM)
}
###We now create the LSF query.
cline <- paste("bsub -n ",CORE_NUMS," -N -R singularity -R ",paste('"rusage[mem=',MEMORY_LIM,'"]',sep=""),
" -o ",log_file," -e ",war_file," -w ",TIME_LIM," SINGULARITYENV_POLARITY=",sel_polarity," SINGULARITYENV_NCORES=",CORE_NUMS,
" SINGULARITYENV_MEMORY=",MEMORY_LIM," SINGULARITYENV_CLUSTER=1 SINGULARITYENV_USERNAME=dalexis singularity run -C -B ",output_dir,":/output -B ",
sel_input,":/input lcms_workflow_zamboni.simg",sep="")
print(cline)
}
object.size(0.5)
100000object.size(0.5)
100000*object.size(0.5)
format(100000*object.size(0.5)."Mb")
format(100000*object.size(0.5),"Mb")
A <- 1:10
A[c(1,4,NA,NA)]
A <- cbind(1:10,101:110)
A[c(1,4,NA,NA),2]
A[c(1,4,NA,NA),2]
a <- list(list(1,2),list(3,5))
lapply(a,"[",i=1)
lapply(a,"[[",i=1)
"[["
"[["()
"["()
"gg"()
library(rcdk)
get.fingerprint()
get.fingerprint
library(BiocParallel)
?SnowParam
